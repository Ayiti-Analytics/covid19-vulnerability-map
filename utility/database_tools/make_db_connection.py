import boto3
from botocore.exceptions import ClientError
import sys
import requests
import re
import datetime


def validate_ip(ip):
    ip_regex = r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$'
    if re.match( ip_regex, ip):
        return True
    else:
        print("IP Address provided does not match required pattern.")
        return False

def update_db_with_ip(access_key, secret_access_key,
                      security_group_id, rule_description = f'Updated on {datetime.date.today()}',
                      ip_address = None, port = 5432):
    """
    A function a given security group for database access to a provided IPV4 Adress.
    """
    ec2 = boto3.client('ec2',
                       region_name = 'us-east-2',
                       aws_access_key_id = access_key,
                       aws_secret_access_key = secret_access_key)
    # Get current IP address
    if ip_address is None:
        ip_data = requests.get('https://ifconfig.me/ip')
        ip_text = ip_data.text
    else:
        ip_text = ip_address
    try:
        if validate_ip:
            pass
        else:
            raise
    except:
        print("Unexpected error:", sys.exc_info()[0])
        raise
    
    try:
        response = ec2.authorize_security_group_ingress(
            GroupId=security_group_id,
            IpPermissions=[
                {
                    'FromPort': 5432,
                    'IpProtocol': 'tcp',
                    'IpRanges': [
                        {
                            'CidrIp': ip_text+'/32',
                            'Description': rule_description,
                        },
                    ],
                    'ToPort': 5432,
                },
            ],
        )

        print(response)
        
    except ClientError as e:
        if e.response["Error"]["Code"] == "InvalidPermission.Duplicate":
            # ignore the target exception
            print(f"{ip_text} already open to {port}")
            pass
        else:
            print(e.response["Error"]["Code"])
            raise(e)
    except:
        print("Did not work")
        print("Unexpected error:", sys.exc_info()[0])
        raise(e)